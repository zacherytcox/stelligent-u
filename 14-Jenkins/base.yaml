Description: Jenkins Continuous Learning
Parameters:
  PrivateIp:
    Type: String
    Description: Private Ip used for the VPC
    Default: 10.0.0.0
  VPCMask:
    Type: String
    Description: Mask used for the VPC
    Default: 16
  IAMUserOwnerOfResources:
    Type: String
    Description: IAM user that is owner of this CFN stack
    Default: zachery.cox.labs
  EC2InstanceAmi:
    Type: AWS::EC2::Image::Id
    Description: EC2 Instance AMI
    Default: ami-033b95fb8079dc481
    # ami-014534a11156c1a0d
  EC2KeyName:
    Type: String
    Description: Name of the EC2 keys used for ssh
    Default: zacherycox
  IAMUserOwnerIp:
    Type: String
    Description: IP of the Iam user owner
    Default: X.X.X.X
  EC2InstanceType:
    Type: String
    Default: t2.medium  
Resources:
  MyVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Join ['/', [!Ref PrivateIp, !Ref VPCMask ] ]
      Tags: &ResourceTags
        -
          Key: user
          Value: !Ref IAMUserOwnerOfResources
        -
          Key: stack
          Value: !Ref "AWS::StackId"
  MySubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVpc
      CidrBlock: !Join ['/', [!Ref PrivateIp, '25' ] ]
      Tags:
        -
          Key: Name
          Value: PublicSubnet
        -
          Key: user
          Value: !Ref IAMUserOwnerOfResources
        -
          Key: stack
          Value: !Ref "AWS::StackId"
  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
  AttachInternetGatewayToVpc:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MyInternetGateway
      VpcId: !Ref MyVpc
  MyRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVpc
  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyRouteTable
      SubnetId: !Ref MySubnet
  MyRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyRouteTable
      GatewayId: !Ref MyInternetGateway
      DestinationCidrBlock: '0.0.0.0/0'
  MyEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ICMP/ping & SSH access
      GroupName:  !Join ['-', [!Ref 'AWS::StackName', SecurityGroup] ]
      VpcId: !Ref MyVpc
      SecurityGroupIngress:
        -
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        -
          FromPort: -1
          ToPort: -1
          IpProtocol: -1
          CidrIp: 0.0.0.0/0
  SGBaseIngress:
   Type: 'AWS::EC2::SecurityGroupIngress'
   Properties:
      GroupId: !Ref MyEC2SecurityGroup
      FromPort: -1
      ToPort: -1
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt MyEC2SecurityGroup.GroupId
  MyEC2InstanceIp:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref MyEC2Instance
  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref MySubnet
      KeyName: !Ref EC2KeyName
      ImageId: !Ref EC2InstanceAmi
      InstanceType: t2.medium
      IamInstanceProfile: CloudWatchAgentServerRole
      SecurityGroupIds:
        - !Ref MyEC2SecurityGroup
      UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
            rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key
            yum -y upgrade
            yum-config-manager --enable epel
            amazon-linux-extras install epel -y
            amazon-linux-extras install java-openjdk11 -y
            yum-config-manager --enable epel
            yum -y upgrade
            yum install daemonize -y 
            YOURPORT=8080
            yum install -y jenkins
            systemctl daemon-reload
            systemctl enable jenkins
            systemctl start jenkins
            sleep 30
            systemctl status jenkins
            yum -y install git
            yum -y install amazon-cloudwatch-agent
            echo '{
              "agent": {
                "metrics_collection_interval": 60,
                "run_as_user": "root"
              },
              "logs": {
                "logs_collected": {
                  "files": {
                    "collect_list": [
                      {
                        "file_path": "/var/log/jenkins/jenkins.log",
                        "log_group_name": "jenkins.log",
                        "log_stream_name": "{instance_id}"
                      }
                    ]
                  }
                }
              },
              "metrics": {
                "metrics_collected": {
                  "disk": {
                    "measurement": [
                      "used_percent"
                    ],
                    "metrics_collection_interval": 60,
                    "resources": [
                      "*"
                    ]
                  },
                  "mem": {
                    "measurement": [
                      "mem_used_percent"
                    ],
                    "metrics_collection_interval": 60
                  }
                }
              }
            }' > /opt/aws/amazon-cloudwatch-agent/bin/config.json
            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -s -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json
            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -m ec2 -a status
      Tags:
        -
          Key: user
          Value: !Ref IAMUserOwnerOfResources
        -
          Key: stack
          Value: !Ref "AWS::StackId"
        -
          Key: Name
          Value: Jenkins-Server
  MyNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref MyVpc
  MyNetworkEntryMySubnetIngressAllTraffic:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyNetworkAcl
      RuleNumber: 100
      RuleAction: deny
      Protocol: -1
      Egress: True
      CidrBlock: 0.0.0.0/0
  MyNetworkEntryMySubnetIngressIamOwner:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyNetworkAcl
      RuleNumber: 101
      RuleAction: allow
      Protocol: 6
      CidrBlock: !Join ['/', [!Ref IAMUserOwnerIp, '32' ] ]
      PortRange:
        From: 22
        To: 22
  MyNetworkEntryMySubnetEgressIamOwner:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyNetworkAcl
      RuleNumber: 101
      RuleAction: allow
      Protocol: -1
      Egress: True
      CidrBlock: !Join ['/', [!Ref IAMUserOwnerIp, '32' ] ]
  MyNetworkEntryMySecondSubnetIngressAllTraffic:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyNetworkAcl
      RuleNumber: 200
      RuleAction: allow
      Protocol: -1
      CidrBlock: !Join ['/', ["10.0.0.128", '25' ] ]
  MyNetworkEntryMySecondSubnetIngressAllSsh:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyNetworkAcl
      RuleNumber: 201
      RuleAction: allow
      Protocol: 6
      CidrBlock: !Join ['/', ["10.0.0.128", '25' ] ]
      PortRange:
        From: 22
        To: 22
  MyNetworkEntryMySecondSubnetIngressAllPing:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyNetworkAcl
      RuleNumber: 202
      RuleAction: allow
      Protocol: 6
      CidrBlock: !Join ['/', ["10.0.0.128", '25' ] ]
      Icmp:
        Code: -1
        Type: -1
      PortRange:
        From: 0
        To: 65535
  MyNetworkEntryMySecondSubnetIngressAllHttp:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyNetworkAcl
      RuleNumber: 203
      RuleAction: allow
      Protocol: 6
      CidrBlock: !Join ['/', ["10.0.0.128", '25' ] ]
      PortRange:
        From: 80
        To: 80
  MyNetworkEntryMySecondSubnetEgressAllTraffic:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyNetworkAcl
      RuleNumber: 204
      RuleAction: allow
      Egress: True
      Protocol: -1
      CidrBlock: !Join ['/', ["10.0.0.128", '25' ] ]
      PortRange:
        From: 0
        To: 65535
  MySecondSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVpc
      CidrBlock: !Join ['/', ["10.0.0.128", '25' ] ]
      Tags:
        -
          Key: user
          Value: !Ref IAMUserOwnerOfResources
        -
          Key: stack
          Value: !Ref "AWS::StackId"
  MySecondRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVpc
  SecondSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MySecondRouteTable
      SubnetId: !Ref MySecondSubnet
  MySecondRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MySecondRouteTable
      NatGatewayId: !Ref MyNatGateway
      DestinationCidrBlock: '0.0.0.0/0'
  MyNatGatewayInstanceIp:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  MyNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt [ MyNatGatewayInstanceIp, AllocationId ]
      SubnetId: !Ref MySubnet
  MyUbuntuEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref MySecondSubnet #MySubnet #MySecondSubnet
      KeyName: !Ref EC2KeyName
      ImageId: ami-04505e74c0741db8d
      InstanceType: !Ref EC2InstanceType
      IamInstanceProfile: CloudWatchAgentServerRole
      SecurityGroupIds:
        - !Ref MyEC2SecurityGroup
      UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            apt-get update -y 
            apt-get upgrade -y 
            apt install openjdk-11-jre-headless -y
            # wget -O ~/agent.jar http://${MyEC2InstanceIp}:8080/jnlpJars/agent.jar
            # java -jar ~/agent.jar -master http://${MyEC2InstanceIp}:8080/jenkins/  -username admin -password 8cb42631e6f142368517158c2ec16208
            # java -jar ~/agent.jar -jnlpUrl http://${MyEC2InstanceIp}:8080/computer/agent-name/slave-agent.jnlp
            
      Tags:
        -
          Key: Name
          Value: UbuntuJenkins
        -
          Key: user
          Value: !Ref IAMUserOwnerOfResources
        -
          Key: stack
          Value: !Ref "AWS::StackId"
  # MyAmz2EC2Instance:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     SubnetId: !Ref MySubnet #MySecondSubnet
  #     KeyName: !Ref EC2KeyName
  #     ImageId: !Ref EC2InstanceAmi
  #     IamInstanceProfile: CloudWatchAgentServerRole
  #     InstanceType: !Ref EC2InstanceType
  #     SecurityGroupIds:
  #       - !Ref MyEC2SecurityGroup
  #     UserData:
  #         Fn::Base64: !Sub |
  #           #!/bin/bash -xe
  #           wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
  #           rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key
  #           yum -y upgrade
  #           yum-config-manager --enable epel
  #           amazon-linux-extras install epel -y
  #           amazon-linux-extras install java-openjdk11 -y
  #           yum-config-manager --enable epel
  #           yum -y upgrade
  #           wget -O ~/swarm-client-3.9.jar https://repo.jenkins-ci.org/releases/org/jenkins-ci/plugins/swarm-client/3.9/swarm-client-3.9.jar
  #           java -jar ~/swarm-client-3.9.jar -url ${MyEC2InstanceIp} -username admin -password test123
  #           # java -jar /root/swarm-client-3.9.jar -master http://${MyEC2InstanceIp}:50000/jenkins -username admin -password test123
  #           # java -jar /root/swarm-client-3.9.jar -master http://10.0.0.125:50000/jenkins -username admin -password test123
  #           # java -jar /root/swarm-client-3.9.jar -autoDiscoveryAddress -username admin -password test123
  #           # 
  #     Tags:
  #       -
  #         Key: Name
  #         Value: Amz2Jenkins
  #       -
  #         Key: user
  #         Value: !Ref IAMUserOwnerOfResources
  #       -
  #         Key: stack
  #         Value: !Ref "AWS::StackId"
Outputs:
  MyVpcOutput:
    Description: Id of MyVpc
    Value: !Ref MyVpc
  MySubnetOutput:
    Description: Id of MyVpc
    Value: !Ref MySubnet
  MyEC2InstanceOutput:
    Description: Id of MyEC2Instance
    Value: !Ref MyEC2Instance
  MyEC2AgentPrivateIp:
    Description: Private Ip address of MyUbuntuEC2Instance
    Value: !GetAtt [MyUbuntuEC2Instance, PrivateIp]
  MyEC2InstancePublicIpOutput:
    Description: Public Ip address of MyEC2Instance
    Value: !GetAtt [MyEC2Instance, PublicIp]
