AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  UbuntuAMI:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: '/aws/service/canonical/ubuntu/server/20.04/stable/current/amd64/hvm/ebs-gp2/ami-id'
  VPCID:
    Type: 'AWS::EC2::VPC::Id'
  SubnetID:
    Type: 'AWS::EC2::Subnet::Id'
  TagUser:
    Type: String
  TagLesson:
    Type: String
  TagLab:
    Type: String
  KeyName:
    Type: String
Resources:
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: EC2LaunchTemplate
      LaunchTemplateData:
        InstanceType: t3.nano
        ImageId: !Ref UbuntuAMI
        KeyName: !Ref KeyName
        IamInstanceProfile:
          Name: !Ref InstanceProfile
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: True
            SubnetId: !Ref SubnetID
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            /usr/bin/apt-get update -y
            /usr/bin/apt-get install -y python3-pip
            python3 -m pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-2.0-9.tar.gz
            /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2 --configsets default --region ${AWS::Region}
            /usr/local/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource EC2 --region ${AWS::Region}
  EC2:
    Type: AWS::EC2::Instance
    Properties:
      Tags: 
        - Key: user
          Value: !Ref TagUser
        - Key: stelligent-u-lesson
          Value: !Ref TagLesson
        - Key: stelligent-u-lab
          Value: !Ref TagLab
        - Key: Name
          Value: !Ref TagUser
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: "1"
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
        Count: '1'
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - install
            - config
            - launch
        install:
          sources:
            /etc/cloudwatchagent: https://s3.amazonaws.com/amazoncloudwatch-agent/linux/amd64/latest/AmazonCloudWatchAgent.zip
          commands:
            installCloudwatch:
              command: ./install.sh
              cwd: /etc/cloudwatchagent
        config:
          files:
            /opt/aws/amazon-cloudwatch-agent/amazon-cloudwatch-agent.json:
              content: !Sub |
                {
                  "agent": {
                    "metrics_collection_interval": 60,
                    "run_as_user": "root"
                  },
                  "metrics": {
                    "metrics_collected": {
                      "collectd": {
                        "metrics_aggregation_interval": 60
                      },
                      "disk": {
                        "measurement": [
                          "used_percent"
                        ],
                        "metrics_collection_interval": 60,
                        "resources": [
                          "*"
                        ]
                      },
                      "mem": {
                        "measurement": [
                          "mem_used_percent"
                        ],
                        "metrics_collection_interval": 60
                      },
                      "statsd": {
                        "metrics_aggregation_interval": 60,
                        "metrics_collection_interval": 10,
                        "service_address": ":8125"
                      }
                    }
                  }
                }
                # {
                # "agent": {
                #   "metrics_collection_interval": 10,
                #   "run_as_user": "cwagent",
                #   "region": "us-east-1"
                # },
                # "metrics": {
                #   "metrics_collected": {
                #     "cpu": {
                #       "resources": [
                #         "*"
                #       ],
                #       "measurement": [
                #         {"name": "cpu_usage_idle", "rename": "CPU_USAGE_IDLE", "unit": "Percent"},
                #         {"name": "cpu_usage_nice", "unit": "Percent"},
                #         "cpu_usage_guest"
                #       ],
                #       "totalcpu": false,
                #       "metrics_collection_interval": 10
                #     },
                #     "disk": {
                #       "measurement": [
                #         "used_percent"
                #       ],
                #       "metrics_collection_interval": 10,
                #       "resources": [
                #         "*"
                #       ]
                #     },
                #     "mem": {
                #       "measurement": [
                #         "mem_used_percent"
                #       ],
                #       "metrics_collection_interval": 10
                #     },
                #     "statsd": {
                #       "metrics_aggregation_interval": 10,
                #       "metrics_collection_interval": 10,
                #       "service_address": ":8125"
                #     }
                #   }
                # },
                # "logs": {
                #   "files": {
                #     "collect_list":{
                #       "log_group_name": "zach.cox.c9logs",
                #       "log_stream_name": "c9.training"
                #     }
                #   }
                # }
        launch:
          commands:
            launchCloudwatch:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/amazon-cloudwatch-agent.json -s
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref RoleCloudWatch
  RoleCloudWatch:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Stelligent-U 08 CloudWatch'
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: 0.0.0.0/0 #!Join [ "", [ !Ref TesterIP,"/32" ] ]
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0 #!Join [ "", [ !Ref TesterIP,"/32" ] ]
