AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  TagUser:
    Type: String
  TagLesson:
    Type: String
  TagLab:
    Type: String
  KeyName:
    Type: String
Resources:
  WebServerAsg:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier:
        - 'subnet-0a423ebf35650131a' 
        - 'subnet-04e2ac93a826abfc3'
      DesiredCapacity: '3'
      HealthCheckType: 'ELB'
      HealthCheckGracePeriod: 30 
      LaunchConfigurationName: !Ref WebServersLC
      MaxSize: '3'
      MinSize: '3'
      TargetGroupARNs:
        - !Ref TargetGroup
      Tags:  
        - Key: user
          Value: !Ref TagUser
          PropagateAtLaunch: "true"
        - Key: Name
          Value: !Ref TagUser
          PropagateAtLaunch: "true"
        - Key: stelligent-u-lesson
          Value: !Ref TagLesson
          PropagateAtLaunch: "true"
        - Key: stelligent-u-lab
          Value: !Ref TagLab
          PropagateAtLaunch: "true"

  WebServersLC:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: 'ami-0ed9277fb7eb570c9'
      InstanceType: 't2.micro'
      LaunchConfigurationName: 'SimpleWebServerLC-zach'
      KeyName: !Ref KeyName
      SecurityGroups:
        - !GetAtt SecurityGroup.GroupId
      UserData: 
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash -xe

            yum install -y aws-cfn-bootstrap

            # Install the files and packages from the metadata
            /opt/aws/bin/cfn-init -v \
              --stack ${AWS::StackName} \
              --resource WebServersLC \
              --configsets ascending \
              --region ${AWS::Region}

            # Signal the status from cfn-init
            /opt/aws/bin/cfn-signal -e $? \
              --stack ${AWS::StackName} \
              --resource WebServersLC \
              --region ${AWS::Region}

    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          ascending:
            - ConfigureStelligentProject-1
            - ConfigureStelligentProject-2
        ConfigureStelligentProject-1:
          packages:
            amazon-linux-extras:
              nginx1: []
          commands:
            command:
              command: amazon-linux-extras enable nginx1; yum clean metadata
        ConfigureStelligentProject-2:
          packages:
            yum:
              nginx: []
          files:
            /usr/share/nginx/html/index.html:
              content: '<p>Automation for the People</p>'
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              nginx:
                enabled: 'true'
                ensureRunning: 'true'

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: SecurityGroup
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: 0.0.0.0/0 #!Join [ "", [ !Ref TesterIP,"/32" ] ]
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0 #!Join [ "", [ !Ref TesterIP,"/32" ] ]
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0 #!Join [ "", [ !Ref TesterIP,"/32" ] ]
      Tags:  
        - Key: user
          Value: !Ref TagUser
        - Key: stelligent-u-lesson
          Value: !Ref TagLesson
        - Key: stelligent-u-lab
          Value: !Ref TagLab
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckEnabled: True
      HealthCheckPath: /BADindex.html
      HealthCheckIntervalSeconds: 20
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetGroupAttributes: 
        - Key: deregistration_delay.timeout_seconds
          Value: 20
      Port: 80
      Protocol: HTTP
      Tags:  
        - Key: user
          Value: !Ref TagUser
        - Key: stelligent-u-lesson
          Value: !Ref TagLesson
        - Key: stelligent-u-lab
          Value: !Ref TagLab
      VpcId: vpc-0a7bd3f082973f0e0
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups: 
        - !GetAtt SecurityGroup.GroupId
      Subnets: 
        - 'subnet-0a423ebf35650131a' 
        - 'subnet-04e2ac93a826abfc3'
      Tags: 
        - Key: user
          Value: !Ref TagUser
        - Key: stelligent-u-lesson
          Value: !Ref TagLesson
        - Key: stelligent-u-lab
          Value: !Ref TagLab
      Type: application
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
